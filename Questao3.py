# -*- coding: utf-8 -*-
"""Questao3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FFGhzssQjx2kuezD4fZLd6v4QqxVaH9g
"""

## QUESTÃO3

import random
import numpy as np
import pandas as pd

# Definindo função para aplicar nas linhas e definir categoria de classificacao_termica
def classificar_termicamente(valor_temperatura):
  if valor_temperatura > 25:
    return 'Quente'
  elif valor_temperatura <= 25 and valor_temperatura >= 18:
    return 'Agradável'
  else:
    return 'Frio'

# Definindo função para aplicar nas linhas e definir a relação de cada valor dos 10 dias com a media mensal
def classificar_relacao_media(valor_temperatura,media):
  if valor_temperatura > media:
    return 'Acima da média mensal'
  elif valor_temperatura == media:
    return 'Exatamente na média'
  else:
    return 'Abaixo da média mensal'

# Lista com 30 temperaturas aleatórias entre 12 e 34 graus
temperaturas_numpy = np.random.randint(12,34,30)
print(f'A lista das temperaturas é: {temperaturas_numpy}',end='\n\n')

# Printando requisitos da alternativa A em ordem
print(f'A média das temperaturas é {np.mean(temperaturas_numpy):.2f}')
print(f'A mediana das temperaturas é {np.median(temperaturas_numpy):.2f}')
print(f'O desvio padrão das temperaturas é {np.std(temperaturas_numpy):.2f}')
print(f'O índice de variação das temperaturas é {np.var(temperaturas_numpy):.2f}\n')

# Definindo dataframe em pandas com comando range para os dias 1 a 30 e respectivas colunas requeridas na letra b
temperaturas_pandas = pd.DataFrame({'dia_do_mes':range(1,31),'temperatura_media':temperaturas_numpy,'diferenca_para_media':temperaturas_numpy-np.mean(temperaturas_numpy)})

# Aplicando função de classificacao termica em cada linha de temperatura media
temperaturas_pandas['classificacao_termica']=temperaturas_pandas['temperatura_media'].apply(classificar_termicamente)

# Contando classificacao de temperaturas com filtro de dataframe em pandas
print(f"{len(temperaturas_pandas[temperaturas_pandas['classificacao_termica'] == 'Frio'])} dias foram considerados frios")
print(f"{len(temperaturas_pandas[temperaturas_pandas['classificacao_termica'] == 'Agradável'])} dias foram considerados agradáveis")
print(f"{len(temperaturas_pandas[temperaturas_pandas['classificacao_termica'] == 'Quente'])} dias foram considerados quentes\n")

# Ordenando os itens em ordem decrescente com base nas temperaturas
dataframe_organizada = temperaturas_pandas.sort_values(by=['temperatura_media','classificacao_termica'],ascending=False)

# Filtragem dos dias frios
dias_frios_filtrados = dataframe_organizada[temperaturas_pandas['classificacao_termica'] == 'Frio'][:5]
print('Os 5 dias mais frios foram:\n',dias_frios_filtrados) # Com filtro para somente 5 dias

# Filtragem dos dias quentes
dias_quentes_filtrados = dataframe_organizada[temperaturas_pandas['classificacao_termica'] == 'Quente'][:5]
print('Os 5 dias mais quentes foram:\n',dias_quentes_filtrados) # Com filtro para somente 5 dias

dias_frios_filtrados['relacao_media_5_dias']=dias_frios_filtrados['temperatura_media'].apply(lambda x: classificar_relacao_media(x,np.mean(temperaturas_numpy)))
dias_quentes_filtrados['relacao_media_5_dias']=dias_quentes_filtrados['temperatura_media'].apply(lambda x: classificar_relacao_media(x,np.mean(temperaturas_numpy)))

# Cruzando a classificação térmica com a diferença para a média
print('\nPara dias frios:\n',dias_frios_filtrados['relacao_media_5_dias'])
print('\nPara dias quentes:\n',dias_quentes_filtrados['relacao_media_5_dias'])

# Respondendo perguntas utilizando o método any() para checar se há os valores requisitados
print('\nHouve dias classificados como “Frio” que estavam acima da média do mês?',(dias_frios_filtrados['relacao_media_5_dias'] == 'Acima da média mensal').any())
print('Houve dias classificados como “Quente” que estavam abaixo da média?',(dias_quentes_filtrados['relacao_media_5_dias'] == 'Abaixo da média mensal').any(),'\n')

print(temperaturas_pandas)